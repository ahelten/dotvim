# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|rxvt*) color_prompt=yes;;
esac

# For to 'no' if color prompting is a problem
color_prompt=yes

if [ "$color_prompt" = yes ]; then
    if [ -z $STY ]; then
        PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
    else
        # Prompt when running 'screen'
        PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\][${STY#*.}]:\[\033[01;34m\]\w\[\033[00m\]\$ '
    fi
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    if [ -z $STY ]; then
        PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    else
        PS1="\[\e]0;[${STY#*.}]  ${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    fi
    ;;
*)
    ;;
esac


# Some shortcuts for different directory listings
alias ls='ls -F --color=tty'                 # classify files in colour
alias dir='ls --color=auto --format=vertical'
alias vdir='ls --color=auto --format=long'
alias ll='ls -l'                              # long list
alias la='ls -lA'                             # all but . and ..
alias l='ls -laF'                             #


export DOCS=/c/Users/${USER}/Documents

alias   rm='rm -i'
alias   mv='mv -i'
alias   j=jobs
alias   f='fg %'
alias   fg-='fg %-'
alias   _='fg %-'
alias   +='fg %+'
alias   1='fg 1'
alias   2='fg 2'
alias   3='fg 3'
alias   4='fg 4'
alias   5='fg 5'
alias   6='fg 6'
alias   7='fg 7'
alias   8='fg 8'
alias   9='fg 9'
alias   10='fg 10'
alias   11='fg 11'
alias   12='fg 12'
alias   13='fg 13'
alias   14='fg 14'
alias   15='fg 15'
alias   16='fg 16'
alias   17='fg 17'
alias   18='fg 18'
alias   19='fg 19'
alias   20='fg 20'
alias   h=history
alias   more=less
alias   mroe=more
alias   moer=more
alias   mkae=make
alias   maek=make
alias   p=pushd
alias	pdoc='p $DOCS'
alias	pdocs=pdoc
alias	cddoc='cd $DOCS'
alias	cddocs=cddoc
alias   pst='ps -eLo pid,tid,rtprio,psr,policy,pmem,pcpu,comm,wchan'
alias   grep='/bin/grep --color'
alias   grep2='/bin/grep -r --color --exclude-dir=.svn --exclude-dir="*.dir" --exclude-dir=.git'
alias   grepch='grep2 --include="*.c" --include="*.cc" --include="*.cxx" --include="*.cpp" --include="*.C" --include="*.h" --include="*.hh" --include="*.h++" --include="*.H" --include="*.hpp" --include="*.hxx" --include="*.ino"'
alias   grepc='grep2 --include="*.c" --include="*.cc" --include="*.cxx" --include="*.cpp" --include="*.C"'
alias   greph='grep2 --include="*.h" --include="*.hh" --include="*.h++" --include="*.H" --include="*.hpp" --include="*.hxx"'
alias	grepj='grep2 --include="*.java"'
alias	grepwww='grep2 --include="*.cs" --include="*.cshtml" --include="*.js" --include="*.css"'
alias	grepcs='grep2 --include="*.cs"'
alias	grepcss='grep2 --include="*.css"'
alias	grepcsh='grep2 --include="*.cshtml"'
alias	grepcshtml=grepcsh
alias	grepcmake='grep2 --include="CMake*.txt" --include="*.cmake" --exclude-dir="*.dir"'
alias	grepcmake2='grep2 --include="CMake*.txt" --include="*.cmake"'
alias	grepjs='grep2 --include="*.js"'
alias	greppy='grep2 --include="*.py"'
alias   sizedir='du -h --max-depth=1 . | sort -n -r'
alias   clr="perl -e'print \"\n\" x 90'"
alias   vi=vim
alias   svn-clean="svn status --no-ignore | grep ^[\?I] | cut -c9- | xargs -d \\\n rm -r"
alias   ascii='man ascii'
function svn-diff() { svn diff "$@" | colordiff | less -R; }
alias   diffword='git --no-pager diff -U0 --word-diff --no-index --'


alias   git-grep2="git grep"
git-grepch () { git-grep2 "$@" -- '*.c' '*.cc' '*.cxx' '*.cpp' '*.C' '*.h' '*.hh' '*.h++' '*.H' '*.hpp'; }
git-grepc () { git-grep2 "$@" -- '*.c' '*.cc' '*.cxx' '*.cpp' '*.C'; }
git-greph () { git-grep2 "$@" -- '*.h' '*.hh' '*.h++' '*.H' '*.hpp'; }
git-grepj () { git-grep2 "$@" -- '*.java'; }
git-grepwww () { git-grep2 "$@" -- '*.cs' '*.cshtml' '*.js' '*.css'; }
git-grepcs () { git-grep2 "$@" -- '*.cs'; }
git-grepcss () { git-grep2 "$@" -- '*.css'; }
git-grepcsh () { git-grep2 "$@" -- '*.cshtml'; }
git-grepcshtml () { git-grep2 "$@" -- '*.cshtml'; }
git-grepjs () { git-grep2 "$@" -- '*.js'; }
git-grepcmake () { git-grep2 "$@ --include='CMake*.txt'"; }
git-grepcmake2 () { git-grep2 "$@ --include='CMake*.txt' --include='*.cmake'"; }

retag() { ctags -R --c++-kinds=+p --languages=c,c++ --fields=+iaS --extra=+q "$@"; }
retag-lce() { retag *.cpp *.[ch] api/ wwwd/ tasl/ basic/ base64/ log_storage/ lib* policy-map/ policy-parser/ query_system/ report-proxy/ statistics/ utils/ elasticS; }
rescope() { cscope -buq "$@"; }
rescope-lce() {
  find . -name xpLib -prune -o -name ThirdParty -prune -o -name 'msmtp*' -prune -o -name BUILD -prune -o \( \( -iname "*.cpp" -o -iname "*.[ch]" \) -a -print \) > .cscope.files;
  retag -L .cscope.files;
  retag -e -L .cscope.files;
  cscope -ubq -i .cscope.files;
}

threads () {
    [[ $# -ne 1 || $1 =~ / ]] && echo "USAGE: $FUNCNAME <PID|<executableBasename>" >&2 && return
    if [[ $1 =~ ^[0-9]+$ ]]; then
        local readonly pid=$1
    else
        # -o: Show only the oldest of all matching processes; to exclude the monitor companion process if one exists.
        local readonly pid=`pgrep -o $1 2>/dev/null`
        [ -z "$pid" ] && echo "No '$1' processes found." >&2 && return
    fi
    ps -L --pid $pid -w -o pid,tid,egroup,euser,fgroup,fuser,stat,psr,eip,cputime,pmem,size,rsz,vsz,start_time,etime,wchan,comm | awk 'BEGIN {threadPrintfFmt = "%5s  %5s  %5s  %8s  %10s  %12s  %12s  %15s  %12s\n"} (NR == 2) {printf("[ %s ]    PID %u    %%mem %.1f;  RSZ(MB) %.3f;  VSZ(MB) %.3f;  totCore(MB) %.3f;  eff {u:%s g:%s}\n", $18, $1, $11, $13 / 1024.0 , $14 / 1024.0, $12 / 1024.0, $4, $3); printf(threadPrintfFmt, "__TID", "State", "Core#", "______IP", "cumCPUTime", "_____Started", "_____Elapsed", "___________Name", "curSyscall")} (NR >= 2) {printf(threadPrintfFmt, $2, $7, $8, $9, $10, $15, $16, (NR == 2 ? "<main>" : $18), $17)}' pid=$pid
}

function strerror
{
    grep -w "${1}"  /usr/include/errno.h /usr/include/*/errno*.h || grep -i "${1}"  /usr/include/errno.h /usr/include/*/errno*.h
}

# Find a symbol, any symbol, in all .a/.so/.o files
function findsym
{
    if [ -d "$1" ]; then
        dir=$1
        shift
    else
        dir='.'
    fi

    if [ $# -lt 1 ] || [[ "$@" =~ "--help" ]]; then
        echo -e "\nfindsym:"
        echo -e "       Use 'nm' to search for the specified symbol of any type: function, variable, etc."
        echo -e "       This searches all .a/.so/.o files under the specified directory and the search"
        echo -e "       includes versioned libs like 'libstdc++.a.2.10' and 'libstdc++.so.6.0.19'"
        echo -e "\nUsage: findsym [dir] <symbol>"
        echo -e "  dir      - optional directory, defaults to '.'"
        echo -e "  symbol   - required compiler symbol to search for in [dir]\n"
        return
    fi
    echo -e "Searching '$dir' for symbol '$@'...\n\n"

    # The '{} \;' version runs the '-exec' command on each file separately, whereas the '{} +'
    # version passes all files to one '-exec' command
    #find "( -iname '*.a*' -o -iname '*.so' -o -iname '*.o' )" -exec nm -A {} \; | grep "$@"
    find $dir "( -iname '*.a' -o -iname '*.a.[0-9]*' -o -iname '*.so' -o -iname '*.so.[0-9]*' -o -iname '*.o' )" -exec nm -A --demangle {} + 2>&1 | grep "$@"
}

# Find a function symbol (a symbol defined as Text or Weak) in all .a/.so/.o files
function findsym_function
{
    if [ -d "$1" ]; then
        dir=$1
        shift
    else
        dir='.'
    fi

    if [ $# -lt 1 ] || [[ "$@" =~ "--help" ]]; then
        echo -e "\nfindsym_function:"
        echo -e "       Use 'nm' to search for the specified *function* symbol (one with symbol type 'Text' or 'Weak')"
        echo -e "       This searches all .a/.so/.o files under the specified directory and the search"
        echo -e "       includes versioned libs like 'libstdc++.a.2.10' and 'libstdc++.so.6.0.19'"
        echo -e "\nUsage: findsym_function [dir] <symbol>"
        echo -e "  dir      - optional directory, defaults to '.'"
        echo -e "  symbol   - required compiler symbol to search for in [dir]\n"
        return
    fi

    find $dir "( -iname '*.a' -o -iname '*.a.[0-9]*' -o -iname '*.so' -o -iname '*.so.[0-9]*' -o -iname '*.o' )" -exec nm -A --demangle {} + 2>&1 | grep "[TWtw] .*$@"
}

# Find a function symbol (a symbol defined as Text or Weak) in all executable binary files
function findsym_executables
{
    find -type f -executable -exec sh -c "file -i '{}' | grep -q 'x-executable; charset=binary'" \; -exec nm -A --demangle {} + | grep "$@"
}



export PATH=~/bin:$PATH
#export NDDSHOME="/opt/rti/ndds.4.5f"
#export PATH=$NDDSHOME/scripts:$PATH
#export LD_LIBRARY_PATH=$NDDSHOME/lib/i86Linux2.6gcc4.4.3
export SVN_EDITOR=vim
export EDITOR=vim

ulimit -c unlimited

# Use VI command-line editing
set -o vi


# Either of the following lines should enable the llvm-toolset-7 and devtoolset-7 which includes
# newer clang compiler and newer gcc compiler, respectively (for CCS_SDK there is devtoolset-4).
# These are here only as an example/reminder since we don't typically want to change the gcc
# compiler:
#source scl_source enable devtoolset-7 llvm-toolset-7
# "permanently" enable the Dev Toolset clang compiler (but not the Dev Toolset gcc compiler!)
#source scl_source enable llvm-toolset-7

# Remove Git from Cygwin command PATH because, at a minimum, envsubst.exe and gettext.exe interfere
# and cause things like `git submodule update --init` to fail from cygwin command line
newpath=$(echo $PATH | sed 's#:/c/Program Files/Git/usr/bin:#:#' | sed 's#:/c/Program Files/Git/cmd:#:#')
export PATH=$newpath

# Location of core dumps on Ubuntu (assuming apport is operational)
export CORES=/var/lib/apport/coredump

function getcore()
{
    file=$(ls -1 -t $CORES|grep core|head -1)
    echo "$CORES/$file"
}

alias tailnow='tail -f `ls -1t /opt/greenfield/weedbot/logs/debug* | head -n 1`'

